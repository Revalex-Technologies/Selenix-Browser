import { AppWindow } from './windows/app';

import { BrowserWindow, ipcMain } from 'electron';

export class WindowsService {
  public list: AppWindow[] = [];

  public current: AppWindow;

  public lastFocused: AppWindow;

  constructor() {

    ipcMain.handle('get-tab-zoom', (e, tabId) => {
      return this.findByContentsView(tabId).viewManager.views.get(tabId)
        .webContents.zoomFactor;
    });

    ipcMain.handle('tear-off-tab', async (_e, payload: { tabId: number; screenX?: number; screenY?: number }) => {
      try {
        const { tabId, screenX = 0, screenY = 0 } = payload || ({} as any);
        const from = this.findByContentsView(tabId);
        if (!from) return false;

        const view: any = from.viewManager.views.get(tabId);
        if (!view) return false;

        // Open a new window preserving incognito state
        const to = this.open(!!from.incognito);

        // Position the new window near the cursor if possible
        try {
          const x = Math.max(0, Math.floor(screenX - 80));
          const y = Math.max(0, Math.floor(screenY - 40));
          to.win.setPosition(x, y, false);
        } catch {}

        // Remove mapping from the old window without destroying the view
        try {
          from.viewManager.views.delete(tabId);
        } catch {}

        // Reparent the existing view to the new window
        try {
          view.reparent(to);
        } catch {}

        // Wire up into the new manager map
        try {
          to.viewManager.views.set(tabId, view);
        } catch {}

        // Notify UIs
        try {
          from.send('remove-tab', tabId);
        } catch {}
        try {
          const url = typeof view.url === 'string' ? view.url : view.webContents?.getURL?.() ?? '';
          to.send('create-tab', { url, active: true } as any, false, tabId);
          to.send('select-tab', tabId);
        } catch {}

        // Focus the moved tab
        try { to.viewManager.select(tabId, true); } catch {}

        return true;
      } catch (err) {
        try { console.error('[tear-off-tab] failed:', err); } catch {}
        return false;
      }
    });

  }

  public open(incognito = false) {
    const window = new AppWindow(incognito);
    this.list.push(window);

    window.win.on('focus', () => {
      this.lastFocused = window;
    });

    return window;
  }

  public findByContentsView(webContentsId: number) {
    return this.list.find((x) => !!x.viewManager.views.get(webContentsId));
  }

  public fromBrowserWindow(browserWindow: BrowserWindow) {
    return this.list.find((x) => x.id === browserWindow.id);
  }

  public broadcast(channel: string, ...args: unknown[]) {
    const alive: AppWindow[] = [];
    this.list.forEach((appWindow) => {
      try {
        const win = (appWindow as any)?.win;
        if (!win || typeof win.isDestroyed !== 'function' || win.isDestroyed()) return;
        const wc = win.webContents;
        if (!wc || typeof wc.isDestroyed !== 'function' || wc.isDestroyed()) return;
        wc.send(channel, ...args);
        alive.push(appWindow);
      } catch {}
    });
    this.list = alive;
  }
}
